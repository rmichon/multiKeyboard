#!/bin/bash

#####################################################################
#                                                                   #
#    Generates an API for Android or iOS based on a Faust object    #
#               (c) Romain Michon CCRMA and Grame, 2016             #
#                                                                   #
#####################################################################

. faustpath

# change if you want to get the log of what's happening
LOG="/dev/null"
#LOG="log"

# exit if a command fails
set -e

# global option variables
ANDROID="0"
IOS="0"
NVOICES="12"
POLY2="0"
MIDI="0"
EFFECT=""
SOURCE=0
REUSE=0
INSTALL=0

echoHelp ()
{
	#TODO doc
	echo "$p wrong argument"
    echo ""
    echo "faust2api can be used to generate faust-based dsp objects for iOS and Android."
    echo "To generate an iOS API, run: faust2api -ios yourFaustCode.dsp"
    echo "To generate and Android API, run: faust2api -android yourFaustCode.dsp"
    echo ""
    echo "GLOBAL OPTIONS:"
    echo "   -polyvoices N : creates a polyphonic object with N voices."
    echo "   -effect <effect.dsp>: adds an effect to the polyphonic synth (this option is ignored if -polyvoices is not specified)."
	echo "   -nodoc : prevents documentation from being generated."
    echo ""
    echo "ANDROID-SPECIFIC OPTIONS:"
    echo "   -package : set the JAVA package name (e.g. '-package mypackage' will change the JAVA package name to 'mypackage.DspFaust'). The default package name is 'com.DspFaust.'"
    echo ""
    echo "IOS-SPECIFIC OPTIONS "
    echo "   -midi : add built-in RtMidi support to the API."
}

# dispatch command arguments
while [ $1 ]
do
	p=$1
	
    if [ $p = "-help" ]; then
		echoHelp
    elif [[ -f "$p" ]]; then
		FILE="$p"
    elif [ $p = "-android" ]; then
		ANDROID=1
    elif [ $p = "-ios" ]; then
		IOS="1"
	elif [ $p = "-reuse" ]; then
		REUSE=1
	elif [ $p = "-source" ]; then
		SOURCE=1
	elif [ $p = "-debug" ]; then
		LOG="/dev/stdout"
	elif [ $p = "-install" ]; then
		INSTALL=1
    elif [ "$p" = "-effect" ]; then
        POLY2="1"
		shift
		EFFECT=$1
    elif [ $p = "-nvoices" ]; then
		shift
		NVOICES=$1
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    else
		echoHelp
	exit
    fi
	shift
done

if [ -z $FILE ]; then
    echo "Please, provide a Faust file to process"
    exit
fi

###################################
# GENERATING APP
###################################

APPNAME=$(basename "$FILE")
APPNAME="${APPNAME%.dsp}"
BUILDDIR="faustmulkeyb.$APPNAME"

# making sure that platform is set and generate corresponding global vars
if [ $ANDROID -eq 1 ]; then
	APPFOLDER="$BUILDDIR/app/src/main"
elif [ $IOS -eq 1 ]; then
	APPFOLDER="$BUILDDIR/Faust"
else
	echo "Please, specify a platform: -android or -ios"
	echoHelp
	exit 1
fi

# if reuse then don't rebuild project folder
if [ $REUSE -eq 0 ]; then
	if [ -d "$BUILDDIR" ]; then
		echo "Delete existing app project $BUILDDIR" > $LOG
		rm -rf "$BUILDDIR"
	fi
fi

# copying new template app if no reuse
if [ ! -d "$BUILDDIR" ]; then
	mkdir -p "$BUILDDIR"
	if [ $ANDROID -eq 1 ]; then
		echo "Creating a new Android project in $BUILDDIR" > $LOG
		cp -r $FAUSTLIB/multiKeyboard/android/* "$BUILDDIR"

		# change 'faust' with real *APPNAME
		PLATFORM=$(uname)

		if [ $PLATFORM = "Darwin" ]; then
			sed -i '' 's,com.ccrma.faust,com.ccrma.'$APPNAME',g' $BUILDDIR/app/build.gradle
			sed -i '' 's,com.ccrma.faust,com.ccrma'$APPNAME',g' $APPFOLDER/java/com/ccrma/faust/*
			sed -i '' 's,com.ccrma.faust,com.ccrma.'$APPNAME',g' $APPFOLDER/AndroidManifest.xml
			sed -i '' 's,com.ccrma.faust,com.ccrma.'$APPNAME',g' $APPFOLDER/res/layout/activity_main.xml
			sed -i '' 's,Faust,'$APPNAME',g' $APPFOLDER/res/values/strings.xml
		else
			sed -i 's,com.ccrma.faust,com.ccrma.'$APPNAME',g' $BUILDDIR/app/build.gradle
			sed -i 's,com.ccrma.faust,com.ccrma.'$APPNAME',g' $APPFOLDER/java/com/ccrma/faust/*
			sed -i 's,com.ccrma.faust,com.ccrma.'$APPNAME',g' $APPFOLDER/AndroidManifest.xml
			sed -i 's,com.ccrma.faust,com.ccrma.'$APPNAME',g' $APPFOLDER/res/layout/activity_main.xml
			sed -i 's,Faust,'$APPNAME',g' $APPFOLDER/res/values/strings.xml
		fi
		mv $APPFOLDER/java/com/ccrma/faust $APPFOLDER/java/com/ccrma/$APPNAME
	elif [ $IOS -eq 1 ]; then
		echo "Creating a new iOS project in $BUILDDIR" > $LOG
		cp -r $FAUSTLIB/multiKeyboard/ios/* "$BUILDDIR"
		
		sed -i '' 's,$(TARGET_NAME),'$APPNAME',g' $BUILDDIR/Faust.xcodeproj/project.pbxproj
		sed -i '' 's,ccrma.Faust,ccrma.'$APPNAME',g' $BUILDDIR/Faust.xcodeproj/project.pbxproj
	fi
fi

# updating template app with current DSP
if [ $ANDROID -eq 1 ]; then
	if [ -z "$EFFECT" ]; then # no effect
		echo "Building Android app with no effect" > $LOG
		faust2api -android -nvoices "$NVOICES" -nodoc "$FILE" > $LOG
	else
		echo "Building Android app with effect" > $LOG
		faust2api -android -nvoices "$NVOICES" -effect "$EFFECT" -nodoc "$FILE" > $LOG
	fi
	unzip "dsp-faust.zip" > $LOG
	mv "dsp-faust" "$BUILDDIR"
	rm "dsp-faust.zip"
	cp -r "$BUILDDIR/dsp-faust/cpp" "$APPFOLDER"
	cp $BUILDDIR/dsp-faust/java/* "$APPFOLDER/java/com/DspFaust"
	rm -r "$BUILDDIR/dsp-faust"

	# Run Gradle
	cd $BUILDDIR
	./gradlew assembleRelease > $LOG
	cd ..
		
	cp -r $BUILDDIR/app/build/outputs/apk/app-release.apk $APPNAME.apk > $LOG
	echo "An Android app \"$APPNAME.apk\" was created in the current folder"
elif [ $IOS -eq 1 ]; then
	if [ -z "$EFFECT" ]; then # no effect
		echo "Building iOS app with no effect" > $LOG
		faust2api -ios -midi -nvoices "$NVOICES" -nodoc "$FILE" > $LOG
	else
		echo "Building iOS app with effect" > $LOG
		faust2api -ios -midi -nvoices "$NVOICES" -effect "$EFFECT" -nodoc "$FILE" > $LOG
	fi
	unzip "dsp-faust.zip" > $LOG
	mv "dsp-faust" "$BUILDDIR"
	rm "dsp-faust.zip"
	cp $BUILDDIR/dsp-faust/* "$APPFOLDER"
	rm -r "$BUILDDIR/dsp-faust"
	cp -r $BUILDDIR $APPNAME
	zip -r $APPNAME.zip $APPNAME > $LOG
	rm -r $APPNAME 
	rm -r $BUILDDIR 
	echo "An iOS app Xcode project \"$APPNAME.zip\" was created in the current folder"
else
	echoHelp
	exit 1
fi

###################

if [ $ANDROID -eq 1 ]; then
	if [ $INSTALL -eq 1 ]; then
		echo "Installing the app"
		adb install -r $APPNAME.apk
	fi
	if [ $SOURCE -eq 1 ]; then
		rm -rf faustApp
		mv $BUILDDIR faustApp
		echo "A faustApp app project was created." > $LOG
	else
		if [ $REUSE -eq 0 ]; then
			echo "Delete app project $BUILDDIR" > $LOG
			rm -rf $BUILDDIR
		else
			echo "The build folder $BUILDDIR was not deleted for future builds"
		fi
	fi
fi

