#!/bin/bash

#####################################################################
#                                                                   #
#    Generates an API for Android or iOS based on a Faust object    #
#               (c) Romain Michon CCRMA and Grame, 2016             #
#                                                                   #
#####################################################################

. faustpath

# change if you want to get the log of what's happening
LOG="/dev/null"
#LOG="log"

# exit if a command fails
set -e

# global option variables
ANDROID="0"
IOS="0"
VOICES="12"
POLY2="0"
MIDI="0"
EFFECT=""

echoHelp ()
{
	#TODO doc
	echo "$p wrong argument"
    echo ""
    echo "faust2api can be used to generate faust-based dsp objects for iOS and Android."
    echo "To generate an iOS API, run: faust2api -ios yourFaustCode.dsp"
    echo "To generate and Android API, run: faust2api -android yourFaustCode.dsp"
    echo ""
    echo "GLOBAL OPTIONS:"
    echo "   -polyvoices N : creates a polyphonic object with N voices."
    echo "   -effect <effect.dsp>: adds an effect to the polyphonic synth (this option is ignored if -polyvoices is not specified)."
	echo "   -nodoc : prevents documentation from being generated."
    echo ""
    echo "ANDROID-SPECIFIC OPTIONS:"
    echo "   -package : set the JAVA package name (e.g. '-package mypackage' will change the JAVA package name to 'mypackage.DspFaust'). The default package name is 'com.DspFaust.'"
    echo ""
    echo "IOS-SPECIFIC OPTIONS "
    echo "   -midi : add built-in RtMidi support to the API."
}

# dispatch command arguments
while [ $1 ]
do
	p=$1
	
    if [ $p = "-help" ]; then
		echoHelp
    elif [[ -f "$p" ]]; then
		FILE="$p"
    elif [ $p = "-android" ]; then
		ANDROID=1
    elif [ $p = "-ios" ]; then
		IOS="1"
    elif [ "$p" = "-effect" ]; then
        POLY2="1"
		shift
		EFFECT=$1
    elif [ "$p" = "-midi" ]; then
        MIDI="1"
    elif [ $p = "-polyvoices" ]; then
		shift
		VOICES=$1
    elif [ ${p:0:1} = "-" ]; then
        OPTIONS="$OPTIONS $p"
    else
		echoHelp
	exit
    fi
	shift
done

if [ -z $FILE ]; then
    echo "Please, provide a Faust file to process"
    exit
fi

###################################
# GENERATING APP
###################################

APPNAME=$(basename "$FILE")
APPNAME="${APPNAME%.dsp}"
BUILDDIR="faustmulkeyb.$APPNAME"

if [ ! -d "$BUILDDIR" ]; then
  	echo "Creating new project $BUILDDIR"  > $LOG
	mkdir -p "$BUILDDIR"
	if [ $ANDROID -eq 1 ]; then
		APPFOLDER="$BUILDDIR/app/src/main"
		cp -r $FAUSTLIB/multiKeyboard/android/* "$BUILDDIR"
		if [ -z "$EFFECT" ]; then # no effect
			echo "Building Android app with no effect" > $LOG
			faust2api -android -polyvoices "$VOICES" -nodoc "$FILE"
		else
			echo "Building Android app with effect" > $LOG
			faust2api -android -polyvoices "$VOICES" -effect "$EFFECT" -nodoc "$FILE"
		fi
		unzip "dsp-faust.zip"
		mv "dsp-faust" "$BUILDDIR"
		rm "dsp-faust.zip"
		cp -r "$BUILDDIR/dsp-faust/cpp" "$APPFOLDER"
		cp -r "$BUILDDIR/dsp-faust/java" "$APPFOLDER/java/com/DspFaust"
		rm -r "$BUILDDIR/dsp-faust"
		
	elif [ $IOS -eq 1 ]; then
		echo "Your iOS app is being created" > $LOG
	else
		echoHelp
		exit 1
	fi
fi

###################################
# POST PROCESSING
###################################

#ZIPOUT="$APIFOLDER.zip"

#rm $ZIPOUT 2> /dev/null || true
#zip -r $ZIPOUT $APIFOLDER > /dev/null || exit
#rm -r $APIFOLDER || exit
